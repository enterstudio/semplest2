<project name="SemplestService" default="build-installer" basedir="..">
	
	 <condition property="output.dir" value="${artifactsDir}" 
	             else="${basedir}">
	    <isset property="artifactsDir"/>
	  </condition>

  <property name="build" value="${basedir}/build"/>  
  <property file="${build}/build.properties"/>       
  <property name="lib" value="${basedir}/dist/lib"/>
  <property name="keys" value="${basedir}/keys"/>
  <property name="properties" value="${basedir}/properties"/>
  <property name="source" value="${basedir}/src"/>   
  <property name="dist" value="${basedir}/dist"/>  
  <property name="classes" value="${basedir}/classes"/>  
  <property name="docs" value="${basedir}/docs"/>    
  <property name="javadoc" value="${docs}/api"/>     
  <property name="test.dir" value="${basedir}/test"/>
  <property name="java.debug" value="true"/>
  
  <property name="semplest.protocol.dir" value="${basedir}/../SEMplestProtocol" />
  <property name="semplest.protocol.lib" value="${basedir}/../SEMplestProtocol/lib" />
	
  <property name="semplest.keywords.dir" value="${basedir}/../SemplestKeywords" />
  <property name="semplest.keywords.lib" value="${basedir}/../SemplestKeywords/lib" />
	
  <property name="semplest.bidding.dir" value="${basedir}/../SEMplestBidding" />
  <property name="semplest.bidding.lib" value="${basedir}/../SEMplestBidding/lib" />	
	
  <property name="semplest.clientapi.dir" value="${basedir}/../SemplestServicesClient" />
  <property name="semplest.clientapi.lib" value="${basedir}/../SemplestServicesClient/lib" />
  

  <!-- Adds classes directory and all .jar and .zip files in the lib directory to the CLASSPATH -->
  <path id="class.path">
    <pathelement location="${classes}"/>
    <fileset dir="${lib}">
      <include name="**/*.jar"/>
    </fileset>
  </path>
 
  
  <!--=======================================================================-->
  <!--====Initialization target, runs setup tasks before build starts========-->
  <!--=======================================================================-->
  <target name="init" depends="clean,cleandist" description="Initialize build properties">
    <tstamp>
      <format property="TODAY" pattern="yyyy-MM-dd"/>
    </tstamp>
    <mkdir dir="${classes}"/>
    <echo message="Saving build number to version file."/>
    <echo file="version" message="${product.version}"/>
    <mkdir dir="${dist}"/>
    <copy todir="${dist}">
        <fileset dir="${basedir}">
        <include name="version"/>
        </fileset>
        <fileset dir="${basedir}/properties/"/>   	
    </copy>
  	<echo file="${dist}/path.txt" message="c:/${YAJSW.servicename}" />
  	 <!-- Add libraries to classes dir to include in jar -->
  	    <mkdir dir="${dist}/lib" />
  	    <copy todir="${dist}/lib" filtering="off">
  	      <flattenmapper />
  	      <fileset dir="${basedir}/lib" includes="**/*.jar" />
  	    </copy>
  	    <copy todir="${dist}/lib" filtering="off">
  	      <flattenmapper />
  	      <fileset dir="${semplest.protocol.lib}" includes="**/*.jar" />
  	    </copy>
</target>


  <target name="clean" description="Cleans out the output directory">
    <delete includeEmptyDirs="true" quiet="true">
      <fileset dir="${classes}">
        <include name="**/**"/>
      </fileset>
    </delete>
  </target>


   <target name="cleandist" description="Deletes the previous copy of the output file">
    <delete includeEmptyDirs="true" quiet="true">
      <!-- delete all files from distribution directory -->
      <fileset dir="${dist}"/>
    </delete>
    <delete dir="${output.dir}/ant" failonerror="false"/>
    <delete file="${output.dir}/*.jar" failonerror="false"/>
  </target>

	<target name="compileProtocol" depends="init" description="Compile protocol source files">
	    <javac srcdir="${semplest.protocol.dir}" destdir="${classes}" classpathref="class.path"
	      target="1.6"
	      source="1.6"
	      debug="${java.debug}"   	
	      includes="**/*.java"
	      excludes="**/*.svn"
	    />
	</target>
	
	<target name="depJars" depends="compileProtocol" description="Make Jars for dependencies">
	  	<!-- Create a Jar for SemplestServicesClient, and put it to SemplestServices/lib -->
		<echo message="Creating Jar for SemplestServicesClient..."/>
		<copy todir="${lib}" filtering="off">
			<flattenmapper />
			<fileset dir="${semplest.clientapi.lib}" includes="**/*.jar" />
		</copy>
		<mkdir dir="${semplest.clientapi.dir}/temp"/>
		<javac srcdir="${semplest.clientapi.dir}/src" destdir="${semplest.clientapi.dir}/temp" classpathref="class.path"
			target="1.6"
			source="1.6"
			debug="${java.debug}"   	
			includes="**/*.java" >
			<exclude name="**/*.svn"/>
		</javac>
		<jar destfile="${lib}/SemplestServicesClient.jar" basedir="${semplest.clientapi.dir}/temp">
			 <manifest>
			 	<attribute name="Main-Class" value="semplest.services.client.api"/>
			 </manifest>
		</jar>  	
		 <echo message="Done."/> 
		
		<!-- Create a Jar for SemplestServicesBidding, and put it to SemplestServices/lib -->
		<echo message="Creating Jar for SemplestBidding..."/>
			<copy todir="${dist}/lib" filtering="off">
				<flattenmapper />
				<fileset dir="${semplest.bidding.lib}" includes="**/*.jar" />
			</copy>
			<path id="api.path">
				<pathelement location="${classes}"/>
					<fileset dir="${semplest.bidding.lib}" includes="**/*.jar"/>
				</path>
				<mkdir dir="${semplest.bidding.dir}/temp"/>
			<javac srcdir="${semplest.bidding.dir}" destdir="${semplest.bidding.dir}/temp" classpathref="api.path"
					target="1.6"
					source="1.6"
					debug="${java.debug}"   	
					includes="**/*.java" >
					<exclude name="**/*.svn"/>
			</javac>
			<jar destfile="${dist}/lib/SemplestServicesBidding.jar" basedir="${semplest.bidding.dir}/temp">
			</jar>  
		 <echo message="Done."/> 
		
		<!-- Copy folder for ChaseOrbitalGateway -->
		<echo message="Copy folders for ChaseOrbitalGateway..."/>
  	 	<mkdir dir="${dist}/logs"/>
  	 	<mkdir dir="${dist}/xml"/>
  	 	<copydir src="${basedir}/xml"
  	 		dest="${dist}/xml"
  	 	    includes="**/*.*"
  	 	/>
  	 	<mkdir dir="${dist}/config"/>
		<copydir src="${basedir}/config"
  	 		dest="${dist}/config"
  	 	    includes="**/*.*"
  	 	/>	
	  	
	  	<!-- Create JAR for SemplestKeywords and put it to SemplestServices/lib -->
	  	 	<echo message="Starting to compile SemplestKeywords..."/>	 
			<!-- Copy over the google and msn codes and all the related codes (jdbc etc.) from SemplestServices, so we can compile them with the keyword project together -->
			<mkdir dir="${semplest.keywords.dir}/src/semplest/service/google/adwords"/>
			<copydir src="${basedir}/src/semplest/service/google/adwords"
	  	 		dest="${semplest.keywords.dir}/src/semplest/service/google/adwords"
	  	 	    includes="**/*.java"
	  	 	/>	
			<mkdir dir="${semplest.keywords.dir}/src/semplest/service/msn/adcenter"/>
			<copydir src="${basedir}/src/semplest/service/msn/adcenter"
	  	 		dest="${semplest.keywords.dir}/src/semplest/service/msn/adcenter"
	  	 	    includes="**/*.java"
	  	 	/>	
			<!-- spring jdbc stuff -->
			<mkdir dir="${semplest.keywords.dir}/src/semplest/server/service/springjdbc"/>
			<copydir src="${basedir}/src/semplest/server/service/springjdbc"
	  	 		dest="${semplest.keywords.dir}/src/semplest/server/service/springjdbc"
	  	 	    includes="**/*.java"
	  	 	/>
			<mkdir dir="${semplest.keywords.dir}/src/semplest/server/service/springjdbc/helper"/>
			<copydir src="${basedir}/src/semplest/server/service/springjdbc/helper"
	  	 		dest="${semplest.keywords.dir}/src/semplest/server/service/springjdbc/helper"
	  	 	    includes="**/*.java"
	  	 	/>
			<mkdir dir="${semplest.keywords.dir}/src/semplest/server/service/springjdbc/storedproc"/>
			<copydir src="${basedir}/src/semplest/server/service/springjdbc/storedproc"
	  	 		dest="${semplest.keywords.dir}/src/semplest/server/service/springjdbc/storedproc"
	  	 	    includes="**/*.java"
	  	 	/>		
			<!-- other service related stuff -->			
			<copy todir="${semplest.keywords.dir}/src/semplest/server/service">
				<fileset dir="${basedir}/src/semplest/server/service" includes="SemplestConfiguration.java" />
			</copy>
			<mkdir dir="${semplest.keywords.dir}/src/semplest/util"/>
			<copydir src="${basedir}/src/semplest/util"
	  	 		dest="${semplest.keywords.dir}/src/semplest/util"
	  	 	    includes="**/*.java"
	  	 	/>	
			
	  	 	<!-- Copy SemplestKeywords/lib to SemplestServices/dist/lib -->
	  	 	<copy todir="${lib}" filtering="off">
	  	 		<flattenmapper />
	  	 		<fileset dir="${semplest.keywords.lib}" 
	  	 			includes="**/*.jar" >
	  	 			<exclude name = "SemplestServices.jar" />
	  	 		</fileset>
	  	 	</copy>
	  	 	<!-- Compile SemplestKeywords -->
	  	 	<echo message="Creating Jar for SemplestKeywords..."/>
	  	 	<mkdir dir="${semplest.keywords.dir}/temp"/>
	  	 	<javac srcdir="${semplest.keywords.dir}/src" destdir="${semplest.keywords.dir}/temp" classpathref="class.path"
	  	 		target="1.6"
	  	 	  	source="1.6"
	  	 	  	debug="${java.debug}"   	
	  	 	  	includes="**/*.java" >
	  	 		<exclude name="**/*.svn"/>
	  	 	</javac>
	  	 	<!-- Create Jar for SemplestKeywords, and put it to SemplestServices/dist/lib -->
	  	 	<jar destfile="${lib}/SemplestKeywords.jar" basedir="${semplest.keywords.dir}/temp">
	  	 		<manifest>
	  	 	    	<attribute name="Main-Class" value="semplest.keywords.lda"/>
	  	 	    </manifest>
	  	 	</jar>
		 <echo message="Done."/> 

	</target>
   
  <target name="compile" depends="depJars" description="Compile all source files">
  	<echo message="Compiling SemplestServices..."/>
    <javac srcdir="${source}" destdir="${classes}" classpathref="class.path"
      target="1.6"
      source="1.6"
      debug="${java.debug}"   	
      includes="**/*.java"
      excludes="**/*.svn"
    />
  	 <echo message="Done."/> 
   </target>

	<target name="build-installer" depends="compileProtocol,depJars,compile" description="Create distribution executable">
		    <echo message="Compiling of SemplestServices Finished Successfully!"/>  
	</target>

</project>