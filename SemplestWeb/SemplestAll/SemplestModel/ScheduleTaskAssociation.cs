//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace SemplestModel
{
    public partial class ScheduleTaskAssociation
    {
        #region Primitive Properties
    
        public virtual int TaskFK
        {
            get { return _taskFK; }
            set
            {
                if (_taskFK != value)
                {
                    if (Task != null && Task.TaskPK != value)
                    {
                        Task = null;
                    }
                    _taskFK = value;
                }
            }
        }
        private int _taskFK;
    
        public virtual int ScheduleFK
        {
            get { return _scheduleFK; }
            set
            {
                if (_scheduleFK != value)
                {
                    if (Schedule != null && Schedule.SchedulePK != value)
                    {
                        Schedule = null;
                    }
                    _scheduleFK = value;
                }
            }
        }
        private int _scheduleFK;
    
        public virtual int TaskExecutionOrder
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Schedule Schedule
        {
            get { return _schedule; }
            set
            {
                if (!ReferenceEquals(_schedule, value))
                {
                    var previousValue = _schedule;
                    _schedule = value;
                    FixupSchedule(previousValue);
                }
            }
        }
        private Schedule _schedule;
    
        public virtual Task Task
        {
            get { return _task; }
            set
            {
                if (!ReferenceEquals(_task, value))
                {
                    var previousValue = _task;
                    _task = value;
                    FixupTask(previousValue);
                }
            }
        }
        private Task _task;

        #endregion
        #region Association Fixup
    
        private void FixupSchedule(Schedule previousValue)
        {
            if (previousValue != null && previousValue.ScheduleTaskAssociations.Contains(this))
            {
                previousValue.ScheduleTaskAssociations.Remove(this);
            }
    
            if (Schedule != null)
            {
                if (!Schedule.ScheduleTaskAssociations.Contains(this))
                {
                    Schedule.ScheduleTaskAssociations.Add(this);
                }
                if (ScheduleFK != Schedule.SchedulePK)
                {
                    ScheduleFK = Schedule.SchedulePK;
                }
            }
        }
    
        private void FixupTask(Task previousValue)
        {
            if (previousValue != null && previousValue.ScheduleTaskAssociations.Contains(this))
            {
                previousValue.ScheduleTaskAssociations.Remove(this);
            }
    
            if (Task != null)
            {
                if (!Task.ScheduleTaskAssociations.Contains(this))
                {
                    Task.ScheduleTaskAssociations.Add(this);
                }
                if (TaskFK != Task.TaskPK)
                {
                    TaskFK = Task.TaskPK;
                }
            }
        }

        #endregion
    }
}
