//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace SemplestModel
{
    public partial class RolesRightsAssociation
    {
        #region Primitive Properties
    
        public virtual int RolesFK
        {
            get { return _rolesFK; }
            set
            {
                if (_rolesFK != value)
                {
                    if (Role != null && Role.RolePK != value)
                    {
                        Role = null;
                    }
                    _rolesFK = value;
                }
            }
        }
        private int _rolesFK;
    
        public virtual int RightsFK
        {
            get { return _rightsFK; }
            set
            {
                if (_rightsFK != value)
                {
                    if (Right != null && Right.RightsPK != value)
                    {
                        Right = null;
                    }
                    _rightsFK = value;
                }
            }
        }
        private int _rightsFK;
    
        public virtual bool IsVisible
        {
            get;
            set;
        }
    
        public virtual bool IsReadonly
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Right Right
        {
            get { return _right; }
            set
            {
                if (!ReferenceEquals(_right, value))
                {
                    var previousValue = _right;
                    _right = value;
                    FixupRight(previousValue);
                }
            }
        }
        private Right _right;
    
        public virtual Role Role
        {
            get { return _role; }
            set
            {
                if (!ReferenceEquals(_role, value))
                {
                    var previousValue = _role;
                    _role = value;
                    FixupRole(previousValue);
                }
            }
        }
        private Role _role;

        #endregion
        #region Association Fixup
    
        private void FixupRight(Right previousValue)
        {
            if (previousValue != null && previousValue.RolesRightsAssociations.Contains(this))
            {
                previousValue.RolesRightsAssociations.Remove(this);
            }
    
            if (Right != null)
            {
                if (!Right.RolesRightsAssociations.Contains(this))
                {
                    Right.RolesRightsAssociations.Add(this);
                }
                if (RightsFK != Right.RightsPK)
                {
                    RightsFK = Right.RightsPK;
                }
            }
        }
    
        private void FixupRole(Role previousValue)
        {
            if (previousValue != null && previousValue.RolesRightsAssociations.Contains(this))
            {
                previousValue.RolesRightsAssociations.Remove(this);
            }
    
            if (Role != null)
            {
                if (!Role.RolesRightsAssociations.Contains(this))
                {
                    Role.RolesRightsAssociations.Add(this);
                }
                if (RolesFK != Role.RolePK)
                {
                    RolesFK = Role.RolePK;
                }
            }
        }

        #endregion
    }
}
