//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace SemplestModel
{
    public partial class Customer
    {
        #region Primitive Properties
    
        public virtual int CustomerPK
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual decimal TotalTargetCycleBudget
        {
            get;
            set;
        }
    
        public virtual int ProductGroupCycleTypeFK
        {
            get { return _productGroupCycleTypeFK; }
            set
            {
                if (_productGroupCycleTypeFK != value)
                {
                    if (ProductGroupCycleType != null && ProductGroupCycleType.ProductGroupCycleTypePK != value)
                    {
                        ProductGroupCycleType = null;
                    }
                    _productGroupCycleTypeFK = value;
                }
            }
        }
        private int _productGroupCycleTypeFK;
    
        public virtual int BillTypeFK
        {
            get { return _billTypeFK; }
            set
            {
                if (_billTypeFK != value)
                {
                    if (BillType != null && BillType.BillTypePK != value)
                    {
                        BillType = null;
                    }
                    _billTypeFK = value;
                }
            }
        }
        private int _billTypeFK;
    
        public virtual System.DateTime CreatedDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> EditedDate
        {
            get;
            set;
        }
    
        public virtual decimal ServiceFee
        {
            get;
            set;
        }
    
        public virtual decimal PercentOfMedia
        {
            get;
            set;
        }
    
        public virtual string InternalCustomerId
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<AdvertisingEngineAccount> AdvertisingEngineAccounts
        {
            get
            {
                if (_advertisingEngineAccounts == null)
                {
                    var newCollection = new FixupCollection<AdvertisingEngineAccount>();
                    newCollection.CollectionChanged += FixupAdvertisingEngineAccounts;
                    _advertisingEngineAccounts = newCollection;
                }
                return _advertisingEngineAccounts;
            }
            set
            {
                if (!ReferenceEquals(_advertisingEngineAccounts, value))
                {
                    var previousValue = _advertisingEngineAccounts as FixupCollection<AdvertisingEngineAccount>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAdvertisingEngineAccounts;
                    }
                    _advertisingEngineAccounts = value;
                    var newValue = value as FixupCollection<AdvertisingEngineAccount>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAdvertisingEngineAccounts;
                    }
                }
            }
        }
        private ICollection<AdvertisingEngineAccount> _advertisingEngineAccounts;
    
        public virtual BillType BillType
        {
            get { return _billType; }
            set
            {
                if (!ReferenceEquals(_billType, value))
                {
                    var previousValue = _billType;
                    _billType = value;
                    FixupBillType(previousValue);
                }
            }
        }
        private BillType _billType;
    
        public virtual ICollection<CustomerHierarchy> CustomerHierarchies
        {
            get
            {
                if (_customerHierarchies == null)
                {
                    var newCollection = new FixupCollection<CustomerHierarchy>();
                    newCollection.CollectionChanged += FixupCustomerHierarchies;
                    _customerHierarchies = newCollection;
                }
                return _customerHierarchies;
            }
            set
            {
                if (!ReferenceEquals(_customerHierarchies, value))
                {
                    var previousValue = _customerHierarchies as FixupCollection<CustomerHierarchy>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerHierarchies;
                    }
                    _customerHierarchies = value;
                    var newValue = value as FixupCollection<CustomerHierarchy>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerHierarchies;
                    }
                }
            }
        }
        private ICollection<CustomerHierarchy> _customerHierarchies;
    
        public virtual ICollection<ProductGroup> ProductGroups
        {
            get
            {
                if (_productGroups == null)
                {
                    var newCollection = new FixupCollection<ProductGroup>();
                    newCollection.CollectionChanged += FixupProductGroups;
                    _productGroups = newCollection;
                }
                return _productGroups;
            }
            set
            {
                if (!ReferenceEquals(_productGroups, value))
                {
                    var previousValue = _productGroups as FixupCollection<ProductGroup>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProductGroups;
                    }
                    _productGroups = value;
                    var newValue = value as FixupCollection<ProductGroup>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProductGroups;
                    }
                }
            }
        }
        private ICollection<ProductGroup> _productGroups;
    
        public virtual ICollection<CustomerAddressAssociation> CustomerAddressAssociations
        {
            get
            {
                if (_customerAddressAssociations == null)
                {
                    var newCollection = new FixupCollection<CustomerAddressAssociation>();
                    newCollection.CollectionChanged += FixupCustomerAddressAssociations;
                    _customerAddressAssociations = newCollection;
                }
                return _customerAddressAssociations;
            }
            set
            {
                if (!ReferenceEquals(_customerAddressAssociations, value))
                {
                    var previousValue = _customerAddressAssociations as FixupCollection<CustomerAddressAssociation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerAddressAssociations;
                    }
                    _customerAddressAssociations = value;
                    var newValue = value as FixupCollection<CustomerAddressAssociation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerAddressAssociations;
                    }
                }
            }
        }
        private ICollection<CustomerAddressAssociation> _customerAddressAssociations;
    
        public virtual ICollection<CustomerPhoneAssociation> CustomerPhoneAssociations
        {
            get
            {
                if (_customerPhoneAssociations == null)
                {
                    var newCollection = new FixupCollection<CustomerPhoneAssociation>();
                    newCollection.CollectionChanged += FixupCustomerPhoneAssociations;
                    _customerPhoneAssociations = newCollection;
                }
                return _customerPhoneAssociations;
            }
            set
            {
                if (!ReferenceEquals(_customerPhoneAssociations, value))
                {
                    var previousValue = _customerPhoneAssociations as FixupCollection<CustomerPhoneAssociation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerPhoneAssociations;
                    }
                    _customerPhoneAssociations = value;
                    var newValue = value as FixupCollection<CustomerPhoneAssociation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerPhoneAssociations;
                    }
                }
            }
        }
        private ICollection<CustomerPhoneAssociation> _customerPhoneAssociations;
    
        public virtual ProductGroupCycleType ProductGroupCycleType
        {
            get { return _productGroupCycleType; }
            set
            {
                if (!ReferenceEquals(_productGroupCycleType, value))
                {
                    var previousValue = _productGroupCycleType;
                    _productGroupCycleType = value;
                    FixupProductGroupCycleType(previousValue);
                }
            }
        }
        private ProductGroupCycleType _productGroupCycleType;
    
        public virtual ICollection<WebContentQuestionMarkHelp> WebContentQuestionMarkHelps
        {
            get
            {
                if (_webContentQuestionMarkHelps == null)
                {
                    var newCollection = new FixupCollection<WebContentQuestionMarkHelp>();
                    newCollection.CollectionChanged += FixupWebContentQuestionMarkHelps;
                    _webContentQuestionMarkHelps = newCollection;
                }
                return _webContentQuestionMarkHelps;
            }
            set
            {
                if (!ReferenceEquals(_webContentQuestionMarkHelps, value))
                {
                    var previousValue = _webContentQuestionMarkHelps as FixupCollection<WebContentQuestionMarkHelp>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupWebContentQuestionMarkHelps;
                    }
                    _webContentQuestionMarkHelps = value;
                    var newValue = value as FixupCollection<WebContentQuestionMarkHelp>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupWebContentQuestionMarkHelps;
                    }
                }
            }
        }
        private ICollection<WebContentQuestionMarkHelp> _webContentQuestionMarkHelps;
    
        public virtual ICollection<CustomerHierarchy> CustomerHierarchies1
        {
            get
            {
                if (_customerHierarchies1 == null)
                {
                    var newCollection = new FixupCollection<CustomerHierarchy>();
                    newCollection.CollectionChanged += FixupCustomerHierarchies1;
                    _customerHierarchies1 = newCollection;
                }
                return _customerHierarchies1;
            }
            set
            {
                if (!ReferenceEquals(_customerHierarchies1, value))
                {
                    var previousValue = _customerHierarchies1 as FixupCollection<CustomerHierarchy>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerHierarchies1;
                    }
                    _customerHierarchies1 = value;
                    var newValue = value as FixupCollection<CustomerHierarchy>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerHierarchies1;
                    }
                }
            }
        }
        private ICollection<CustomerHierarchy> _customerHierarchies1;
    
        public virtual ICollection<CustomerNote> CustomerNotes
        {
            get
            {
                if (_customerNotes == null)
                {
                    var newCollection = new FixupCollection<CustomerNote>();
                    newCollection.CollectionChanged += FixupCustomerNotes;
                    _customerNotes = newCollection;
                }
                return _customerNotes;
            }
            set
            {
                if (!ReferenceEquals(_customerNotes, value))
                {
                    var previousValue = _customerNotes as FixupCollection<CustomerNote>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCustomerNotes;
                    }
                    _customerNotes = value;
                    var newValue = value as FixupCollection<CustomerNote>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCustomerNotes;
                    }
                }
            }
        }
        private ICollection<CustomerNote> _customerNotes;
    
        public virtual CustomerStyle CustomerStyle
        {
            get { return _customerStyle; }
            set
            {
                if (!ReferenceEquals(_customerStyle, value))
                {
                    var previousValue = _customerStyle;
                    _customerStyle = value;
                    FixupCustomerStyle(previousValue);
                }
            }
        }
        private CustomerStyle _customerStyle;
    
        public virtual ICollection<EmailTemplate> EmailTemplates
        {
            get
            {
                if (_emailTemplates == null)
                {
                    var newCollection = new FixupCollection<EmailTemplate>();
                    newCollection.CollectionChanged += FixupEmailTemplates;
                    _emailTemplates = newCollection;
                }
                return _emailTemplates;
            }
            set
            {
                if (!ReferenceEquals(_emailTemplates, value))
                {
                    var previousValue = _emailTemplates as FixupCollection<EmailTemplate>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmailTemplates;
                    }
                    _emailTemplates = value;
                    var newValue = value as FixupCollection<EmailTemplate>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmailTemplates;
                    }
                }
            }
        }
        private ICollection<EmailTemplate> _emailTemplates;
    
        public virtual ICollection<EmployeeCustomerAssociation> EmployeeCustomerAssociations
        {
            get
            {
                if (_employeeCustomerAssociations == null)
                {
                    var newCollection = new FixupCollection<EmployeeCustomerAssociation>();
                    newCollection.CollectionChanged += FixupEmployeeCustomerAssociations;
                    _employeeCustomerAssociations = newCollection;
                }
                return _employeeCustomerAssociations;
            }
            set
            {
                if (!ReferenceEquals(_employeeCustomerAssociations, value))
                {
                    var previousValue = _employeeCustomerAssociations as FixupCollection<EmployeeCustomerAssociation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployeeCustomerAssociations;
                    }
                    _employeeCustomerAssociations = value;
                    var newValue = value as FixupCollection<EmployeeCustomerAssociation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployeeCustomerAssociations;
                    }
                }
            }
        }
        private ICollection<EmployeeCustomerAssociation> _employeeCustomerAssociations;
    
        public virtual ICollection<Schedule> Schedules
        {
            get
            {
                if (_schedules == null)
                {
                    var newCollection = new FixupCollection<Schedule>();
                    newCollection.CollectionChanged += FixupSchedules;
                    _schedules = newCollection;
                }
                return _schedules;
            }
            set
            {
                if (!ReferenceEquals(_schedules, value))
                {
                    var previousValue = _schedules as FixupCollection<Schedule>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSchedules;
                    }
                    _schedules = value;
                    var newValue = value as FixupCollection<Schedule>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSchedules;
                    }
                }
            }
        }
        private ICollection<Schedule> _schedules;
    
        public virtual ICollection<WebContent> WebContents
        {
            get
            {
                if (_webContents == null)
                {
                    var newCollection = new FixupCollection<WebContent>();
                    newCollection.CollectionChanged += FixupWebContents;
                    _webContents = newCollection;
                }
                return _webContents;
            }
            set
            {
                if (!ReferenceEquals(_webContents, value))
                {
                    var previousValue = _webContents as FixupCollection<WebContent>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupWebContents;
                    }
                    _webContents = value;
                    var newValue = value as FixupCollection<WebContent>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupWebContents;
                    }
                }
            }
        }
        private ICollection<WebContent> _webContents;
    
        public virtual ICollection<User> Users
        {
            get
            {
                if (_users == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupUsers;
                    _users = newCollection;
                }
                return _users;
            }
            set
            {
                if (!ReferenceEquals(_users, value))
                {
                    var previousValue = _users as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUsers;
                    }
                    _users = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUsers;
                    }
                }
            }
        }
        private ICollection<User> _users;

        #endregion
        #region Association Fixup
    
        private void FixupBillType(BillType previousValue)
        {
            if (previousValue != null && previousValue.Customers.Contains(this))
            {
                previousValue.Customers.Remove(this);
            }
    
            if (BillType != null)
            {
                if (!BillType.Customers.Contains(this))
                {
                    BillType.Customers.Add(this);
                }
                if (BillTypeFK != BillType.BillTypePK)
                {
                    BillTypeFK = BillType.BillTypePK;
                }
            }
        }
    
        private void FixupProductGroupCycleType(ProductGroupCycleType previousValue)
        {
            if (previousValue != null && previousValue.Customers.Contains(this))
            {
                previousValue.Customers.Remove(this);
            }
    
            if (ProductGroupCycleType != null)
            {
                if (!ProductGroupCycleType.Customers.Contains(this))
                {
                    ProductGroupCycleType.Customers.Add(this);
                }
                if (ProductGroupCycleTypeFK != ProductGroupCycleType.ProductGroupCycleTypePK)
                {
                    ProductGroupCycleTypeFK = ProductGroupCycleType.ProductGroupCycleTypePK;
                }
            }
        }
    
        private void FixupCustomerStyle(CustomerStyle previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Customer, this))
            {
                previousValue.Customer = null;
            }
    
            if (CustomerStyle != null)
            {
                CustomerStyle.Customer = this;
            }
        }
    
        private void FixupAdvertisingEngineAccounts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AdvertisingEngineAccount item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AdvertisingEngineAccount item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupCustomerHierarchies(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerHierarchy item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerHierarchy item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupProductGroups(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProductGroup item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductGroup item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupCustomerAddressAssociations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerAddressAssociation item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerAddressAssociation item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupCustomerPhoneAssociations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerPhoneAssociation item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerPhoneAssociation item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupWebContentQuestionMarkHelps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (WebContentQuestionMarkHelp item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WebContentQuestionMarkHelp item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupCustomerHierarchies1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerHierarchy item in e.NewItems)
                {
                    item.Customer1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerHierarchy item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer1, this))
                    {
                        item.Customer1 = null;
                    }
                }
            }
        }
    
        private void FixupCustomerNotes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CustomerNote item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CustomerNote item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupEmailTemplates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmailTemplate item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmailTemplate item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupEmployeeCustomerAssociations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EmployeeCustomerAssociation item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmployeeCustomerAssociation item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupSchedules(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Schedule item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Schedule item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupWebContents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (WebContent item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (WebContent item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }
    
        private void FixupUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    item.Customer = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                }
            }
        }

        #endregion
    }
}
