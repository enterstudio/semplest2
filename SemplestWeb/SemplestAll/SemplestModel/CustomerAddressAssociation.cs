//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace SemplestModel
{
    public partial class CustomerAddressAssociation
    {
        #region Primitive Properties
    
        public virtual int AddressFK
        {
            get { return _addressFK; }
            set
            {
                if (_addressFK != value)
                {
                    if (Address != null && Address.AddressPK != value)
                    {
                        Address = null;
                    }
                    _addressFK = value;
                }
            }
        }
        private int _addressFK;
    
        public virtual int CustomerFK
        {
            get { return _customerFK; }
            set
            {
                if (_customerFK != value)
                {
                    if (Customer != null && Customer.CustomerPK != value)
                    {
                        Customer = null;
                    }
                    _customerFK = value;
                }
            }
        }
        private int _customerFK;
    
        public virtual int AddressTypeFK
        {
            get { return _addressTypeFK; }
            set
            {
                if (_addressTypeFK != value)
                {
                    if (AddressType != null && AddressType.AddressTypePK != value)
                    {
                        AddressType = null;
                    }
                    _addressTypeFK = value;
                }
            }
        }
        private int _addressTypeFK;
    
        public virtual System.DateTime CreatedDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Address Address
        {
            get { return _address; }
            set
            {
                if (!ReferenceEquals(_address, value))
                {
                    var previousValue = _address;
                    _address = value;
                    FixupAddress(previousValue);
                }
            }
        }
        private Address _address;
    
        public virtual AddressType AddressType
        {
            get { return _addressType; }
            set
            {
                if (!ReferenceEquals(_addressType, value))
                {
                    var previousValue = _addressType;
                    _addressType = value;
                    FixupAddressType(previousValue);
                }
            }
        }
        private AddressType _addressType;
    
        public virtual Customer Customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    var previousValue = _customer;
                    _customer = value;
                    FixupCustomer(previousValue);
                }
            }
        }
        private Customer _customer;

        #endregion
        #region Association Fixup
    
        private void FixupAddress(Address previousValue)
        {
            if (previousValue != null && previousValue.CustomerAddressAssociations.Contains(this))
            {
                previousValue.CustomerAddressAssociations.Remove(this);
            }
    
            if (Address != null)
            {
                if (!Address.CustomerAddressAssociations.Contains(this))
                {
                    Address.CustomerAddressAssociations.Add(this);
                }
                if (AddressFK != Address.AddressPK)
                {
                    AddressFK = Address.AddressPK;
                }
            }
        }
    
        private void FixupAddressType(AddressType previousValue)
        {
            if (previousValue != null && previousValue.CustomerAddressAssociations.Contains(this))
            {
                previousValue.CustomerAddressAssociations.Remove(this);
            }
    
            if (AddressType != null)
            {
                if (!AddressType.CustomerAddressAssociations.Contains(this))
                {
                    AddressType.CustomerAddressAssociations.Add(this);
                }
                if (AddressTypeFK != AddressType.AddressTypePK)
                {
                    AddressTypeFK = AddressType.AddressTypePK;
                }
            }
        }
    
        private void FixupCustomer(Customer previousValue)
        {
            if (previousValue != null && previousValue.CustomerAddressAssociations.Contains(this))
            {
                previousValue.CustomerAddressAssociations.Remove(this);
            }
    
            if (Customer != null)
            {
                if (!Customer.CustomerAddressAssociations.Contains(this))
                {
                    Customer.CustomerAddressAssociations.Add(this);
                }
                if (CustomerFK != Customer.CustomerPK)
                {
                    CustomerFK = Customer.CustomerPK;
                }
            }
        }

        #endregion
    }
}
