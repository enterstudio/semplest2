//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace SemplestModel
{
    public partial class Schedule
    {
        #region Primitive Properties
    
        public virtual int SchedulePK
        {
            get;
            set;
        }
    
        public virtual string ScheduleName
        {
            get;
            set;
        }
    
        public virtual System.DateTime StartTime
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> EndDate
        {
            get;
            set;
        }
    
        public virtual int FrequencyFK
        {
            get { return _frequencyFK; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_frequencyFK != value)
                    {
                        if (Frequency != null && Frequency.FrequencyPK != value)
                        {
                            Frequency = null;
                        }
                        _frequencyFK = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _frequencyFK;
    
        public virtual bool IsEnabled
        {
            get;
            set;
        }
    
        public virtual bool IsInactive
        {
            get;
            set;
        }
    
        public virtual int CreatedBy
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreatedDate
        {
            get;
            set;
        }
    
        public virtual int EditedBy
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> EditedDate
        {
            get;
            set;
        }
    
        public virtual Nullable<int> PromotionFK
        {
            get { return _promotionFK; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_promotionFK != value)
                    {
                        if (Promotion != null && Promotion.PromotionPK != value)
                        {
                            Promotion = null;
                        }
                        _promotionFK = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _promotionFK;
    
        public virtual Nullable<int> CustomerFK
        {
            get { return _customerFK; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_customerFK != value)
                    {
                        if (Customer != null && Customer.CustomerPK != value)
                        {
                            Customer = null;
                        }
                        _customerFK = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _customerFK;
    
        public virtual Nullable<int> ProductGroupFK
        {
            get { return _productGroupFK; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_productGroupFK != value)
                    {
                        if (ProductGroup != null && ProductGroup.ProductGroupPK != value)
                        {
                            ProductGroup = null;
                        }
                        _productGroupFK = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _productGroupFK;
    
        public virtual Nullable<int> UsersFK
        {
            get { return _usersFK; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_usersFK != value)
                    {
                        if (User != null && User.UserPK != value)
                        {
                            User = null;
                        }
                        _usersFK = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _usersFK;

        #endregion
        #region Navigation Properties
    
        public virtual Customer Customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    var previousValue = _customer;
                    _customer = value;
                    FixupCustomer(previousValue);
                }
            }
        }
        private Customer _customer;
    
        public virtual Frequency Frequency
        {
            get { return _frequency; }
            set
            {
                if (!ReferenceEquals(_frequency, value))
                {
                    var previousValue = _frequency;
                    _frequency = value;
                    FixupFrequency(previousValue);
                }
            }
        }
        private Frequency _frequency;
    
        public virtual ProductGroup ProductGroup
        {
            get { return _productGroup; }
            set
            {
                if (!ReferenceEquals(_productGroup, value))
                {
                    var previousValue = _productGroup;
                    _productGroup = value;
                    FixupProductGroup(previousValue);
                }
            }
        }
        private ProductGroup _productGroup;
    
        public virtual Promotion Promotion
        {
            get { return _promotion; }
            set
            {
                if (!ReferenceEquals(_promotion, value))
                {
                    var previousValue = _promotion;
                    _promotion = value;
                    FixupPromotion(previousValue);
                }
            }
        }
        private Promotion _promotion;
    
        public virtual ICollection<ScheduleJob> ScheduleJobs
        {
            get
            {
                if (_scheduleJobs == null)
                {
                    var newCollection = new FixupCollection<ScheduleJob>();
                    newCollection.CollectionChanged += FixupScheduleJobs;
                    _scheduleJobs = newCollection;
                }
                return _scheduleJobs;
            }
            set
            {
                if (!ReferenceEquals(_scheduleJobs, value))
                {
                    var previousValue = _scheduleJobs as FixupCollection<ScheduleJob>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupScheduleJobs;
                    }
                    _scheduleJobs = value;
                    var newValue = value as FixupCollection<ScheduleJob>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupScheduleJobs;
                    }
                }
            }
        }
        private ICollection<ScheduleJob> _scheduleJobs;
    
        public virtual ICollection<ScheduleTaskAssociation> ScheduleTaskAssociations
        {
            get
            {
                if (_scheduleTaskAssociations == null)
                {
                    var newCollection = new FixupCollection<ScheduleTaskAssociation>();
                    newCollection.CollectionChanged += FixupScheduleTaskAssociations;
                    _scheduleTaskAssociations = newCollection;
                }
                return _scheduleTaskAssociations;
            }
            set
            {
                if (!ReferenceEquals(_scheduleTaskAssociations, value))
                {
                    var previousValue = _scheduleTaskAssociations as FixupCollection<ScheduleTaskAssociation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupScheduleTaskAssociations;
                    }
                    _scheduleTaskAssociations = value;
                    var newValue = value as FixupCollection<ScheduleTaskAssociation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupScheduleTaskAssociations;
                    }
                }
            }
        }
        private ICollection<ScheduleTaskAssociation> _scheduleTaskAssociations;
    
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCustomer(Customer previousValue)
        {
            if (previousValue != null && previousValue.Schedules.Contains(this))
            {
                previousValue.Schedules.Remove(this);
            }
    
            if (Customer != null)
            {
                if (!Customer.Schedules.Contains(this))
                {
                    Customer.Schedules.Add(this);
                }
                if (CustomerFK != Customer.CustomerPK)
                {
                    CustomerFK = Customer.CustomerPK;
                }
            }
            else if (!_settingFK)
            {
                CustomerFK = null;
            }
        }
    
        private void FixupFrequency(Frequency previousValue)
        {
            if (previousValue != null && previousValue.Schedules.Contains(this))
            {
                previousValue.Schedules.Remove(this);
            }
    
            if (Frequency != null)
            {
                if (!Frequency.Schedules.Contains(this))
                {
                    Frequency.Schedules.Add(this);
                }
                if (FrequencyFK != Frequency.FrequencyPK)
                {
                    FrequencyFK = Frequency.FrequencyPK;
                }
            }
        }
    
        private void FixupProductGroup(ProductGroup previousValue)
        {
            if (previousValue != null && previousValue.Schedules.Contains(this))
            {
                previousValue.Schedules.Remove(this);
            }
    
            if (ProductGroup != null)
            {
                if (!ProductGroup.Schedules.Contains(this))
                {
                    ProductGroup.Schedules.Add(this);
                }
                if (ProductGroupFK != ProductGroup.ProductGroupPK)
                {
                    ProductGroupFK = ProductGroup.ProductGroupPK;
                }
            }
            else if (!_settingFK)
            {
                ProductGroupFK = null;
            }
        }
    
        private void FixupPromotion(Promotion previousValue)
        {
            if (previousValue != null && previousValue.Schedules.Contains(this))
            {
                previousValue.Schedules.Remove(this);
            }
    
            if (Promotion != null)
            {
                if (!Promotion.Schedules.Contains(this))
                {
                    Promotion.Schedules.Add(this);
                }
                if (PromotionFK != Promotion.PromotionPK)
                {
                    PromotionFK = Promotion.PromotionPK;
                }
            }
            else if (!_settingFK)
            {
                PromotionFK = null;
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.Schedules.Contains(this))
            {
                previousValue.Schedules.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.Schedules.Contains(this))
                {
                    User.Schedules.Add(this);
                }
                if (UsersFK != User.UserPK)
                {
                    UsersFK = User.UserPK;
                }
            }
            else if (!_settingFK)
            {
                UsersFK = null;
            }
        }
    
        private void FixupScheduleJobs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ScheduleJob item in e.NewItems)
                {
                    item.Schedule = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ScheduleJob item in e.OldItems)
                {
                    if (ReferenceEquals(item.Schedule, this))
                    {
                        item.Schedule = null;
                    }
                }
            }
        }
    
        private void FixupScheduleTaskAssociations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ScheduleTaskAssociation item in e.NewItems)
                {
                    item.Schedule = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ScheduleTaskAssociation item in e.OldItems)
                {
                    if (ReferenceEquals(item.Schedule, this))
                    {
                        item.Schedule = null;
                    }
                }
            }
        }

        #endregion
    }
}
