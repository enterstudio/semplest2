//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace SemplestModel
{
    public partial class User
    {
        #region Primitive Properties
    
        public virtual int UserPK
        {
            get;
            set;
        }
    
        public virtual Nullable<int> CustomerFK
        {
            get { return _customerFK; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_customerFK != value)
                    {
                        if (Customer != null && Customer.CustomerPK != value)
                        {
                            Customer = null;
                        }
                        _customerFK = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _customerFK;
    
        public virtual string FirstName
        {
            get;
            set;
        }
    
        public virtual string LastName
        {
            get;
            set;
        }
    
        public virtual string Email
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreatedDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> EditedDate
        {
            get;
            set;
        }
    
        public virtual bool IsActive
        {
            get;
            set;
        }
    
        public virtual string MiddleInitial
        {
            get;
            set;
        }
    
        public virtual bool IsRegistered
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Credential> Credentials
        {
            get
            {
                if (_credentials == null)
                {
                    var newCollection = new FixupCollection<Credential>();
                    newCollection.CollectionChanged += FixupCredentials;
                    _credentials = newCollection;
                }
                return _credentials;
            }
            set
            {
                if (!ReferenceEquals(_credentials, value))
                {
                    var previousValue = _credentials as FixupCollection<Credential>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCredentials;
                    }
                    _credentials = value;
                    var newValue = value as FixupCollection<Credential>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCredentials;
                    }
                }
            }
        }
        private ICollection<Credential> _credentials;
    
        public virtual Customer Customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    var previousValue = _customer;
                    _customer = value;
                    FixupCustomer(previousValue);
                }
            }
        }
        private Customer _customer;
    
        public virtual ICollection<Employee> Employees
        {
            get
            {
                if (_employees == null)
                {
                    var newCollection = new FixupCollection<Employee>();
                    newCollection.CollectionChanged += FixupEmployees;
                    _employees = newCollection;
                }
                return _employees;
            }
            set
            {
                if (!ReferenceEquals(_employees, value))
                {
                    var previousValue = _employees as FixupCollection<Employee>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployees;
                    }
                    _employees = value;
                    var newValue = value as FixupCollection<Employee>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployees;
                    }
                }
            }
        }
        private ICollection<Employee> _employees;
    
        public virtual ICollection<Error> Errors
        {
            get
            {
                if (_errors == null)
                {
                    var newCollection = new FixupCollection<Error>();
                    newCollection.CollectionChanged += FixupErrors;
                    _errors = newCollection;
                }
                return _errors;
            }
            set
            {
                if (!ReferenceEquals(_errors, value))
                {
                    var previousValue = _errors as FixupCollection<Error>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupErrors;
                    }
                    _errors = value;
                    var newValue = value as FixupCollection<Error>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupErrors;
                    }
                }
            }
        }
        private ICollection<Error> _errors;
    
        public virtual ICollection<Schedule> Schedules
        {
            get
            {
                if (_schedules == null)
                {
                    var newCollection = new FixupCollection<Schedule>();
                    newCollection.CollectionChanged += FixupSchedules;
                    _schedules = newCollection;
                }
                return _schedules;
            }
            set
            {
                if (!ReferenceEquals(_schedules, value))
                {
                    var previousValue = _schedules as FixupCollection<Schedule>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSchedules;
                    }
                    _schedules = value;
                    var newValue = value as FixupCollection<Schedule>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSchedules;
                    }
                }
            }
        }
        private ICollection<Schedule> _schedules;
    
        public virtual ICollection<TransactionHistory> TransactionHistories
        {
            get
            {
                if (_transactionHistories == null)
                {
                    var newCollection = new FixupCollection<TransactionHistory>();
                    newCollection.CollectionChanged += FixupTransactionHistories;
                    _transactionHistories = newCollection;
                }
                return _transactionHistories;
            }
            set
            {
                if (!ReferenceEquals(_transactionHistories, value))
                {
                    var previousValue = _transactionHistories as FixupCollection<TransactionHistory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTransactionHistories;
                    }
                    _transactionHistories = value;
                    var newValue = value as FixupCollection<TransactionHistory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTransactionHistories;
                    }
                }
            }
        }
        private ICollection<TransactionHistory> _transactionHistories;
    
        public virtual ICollection<UserRolesAssociation> UserRolesAssociations
        {
            get
            {
                if (_userRolesAssociations == null)
                {
                    var newCollection = new FixupCollection<UserRolesAssociation>();
                    newCollection.CollectionChanged += FixupUserRolesAssociations;
                    _userRolesAssociations = newCollection;
                }
                return _userRolesAssociations;
            }
            set
            {
                if (!ReferenceEquals(_userRolesAssociations, value))
                {
                    var previousValue = _userRolesAssociations as FixupCollection<UserRolesAssociation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserRolesAssociations;
                    }
                    _userRolesAssociations = value;
                    var newValue = value as FixupCollection<UserRolesAssociation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserRolesAssociations;
                    }
                }
            }
        }
        private ICollection<UserRolesAssociation> _userRolesAssociations;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCustomer(Customer previousValue)
        {
            if (previousValue != null && previousValue.Users.Contains(this))
            {
                previousValue.Users.Remove(this);
            }
    
            if (Customer != null)
            {
                if (!Customer.Users.Contains(this))
                {
                    Customer.Users.Add(this);
                }
                if (CustomerFK != Customer.CustomerPK)
                {
                    CustomerFK = Customer.CustomerPK;
                }
            }
            else if (!_settingFK)
            {
                CustomerFK = null;
            }
        }
    
        private void FixupCredentials(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Credential item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Credential item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupEmployees(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Employee item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Employee item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupErrors(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Error item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Error item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupSchedules(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Schedule item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Schedule item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupTransactionHistories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TransactionHistory item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TransactionHistory item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupUserRolesAssociations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserRolesAssociation item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserRolesAssociation item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }

        #endregion
    }
}
